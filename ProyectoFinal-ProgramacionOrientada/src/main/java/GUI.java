// Non-gui libraries

import Pacientes.*;
import TiposServicios.*;
import java.io.*;
import java.util.ArrayList;
import java.util.*;

// GUI libraries

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JOptionPane;

/**
 *
 * @author juanb
 */


public class GUI extends javax.swing.JFrame {
    
  // Atributos 
    
    private int contador = 0;
    private ArrayList<Paciente> registroPacientes; //ArrayList Pacientes para su registro
    
  // Paciente
    
    int tipoPaciente; // 0 = null, 1 = cotizante, 2 = beneficiario
    int registro; // Registro interno del sistema
    int numeroDocumentoIdentidad; // Documento Identidad del paciente
    String nombre = ""; // Nombre, tal cual

  // PacienteCotizante
    
    String celular; //Teléfono del cotizante
    double salario; //Salario del cotizante

  // PacienteBeneficiario
    
    int registroCotizante; // Verificación de cotizante para registrar un beneficiario
    String tipoRelacion; //Tipo de relación con el cotizante (Hermano, padre..)
    double salarioCotizante; 
    String tipoIdentificacion; //Cédula, pasaporte..

  // Para las excepciones
    
    boolean error= true;
  
  // GUI
    
    int opcion;
    Scanner sc = new Scanner(System.in);

/**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        txtReporte = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtAreaReporte = new javax.swing.JTextArea();
        txtSeleccioneUnaOpcion = new javax.swing.JLabel();
        botonRegistrarPaciente = new javax.swing.JButton();
        botonRegistrarServicioPaciente = new javax.swing.JButton();
        botonBuscarPaciente = new javax.swing.JButton();
        botonMostrarRegistroPacientes = new javax.swing.JButton();
        botonSalir = new javax.swing.JButton();
        txtRegimenContributivoDeSalud = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtReporte.setFont(new java.awt.Font("Trebuchet MS", 0, 16)); // NOI18N
        txtReporte.setText("Reporte:");

        txtAreaReporte.setColumns(20);
        txtAreaReporte.setRows(5);
        txtAreaReporte.setEnabled(false);
        jScrollPane1.setViewportView(txtAreaReporte);

        txtSeleccioneUnaOpcion.setFont(new java.awt.Font("Trebuchet MS", 0, 16)); // NOI18N
        txtSeleccioneUnaOpcion.setText("Seleccione una opcion:");

        botonRegistrarPaciente.setFont(new java.awt.Font("Trebuchet MS", 0, 16)); // NOI18N
        botonRegistrarPaciente.setText("Registrar a un paciente");
        botonRegistrarPaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonRegistrarPacienteActionPerformed(evt);
            }
        });

        botonRegistrarServicioPaciente.setFont(new java.awt.Font("Trebuchet MS", 0, 16)); // NOI18N
        botonRegistrarServicioPaciente.setText("Registrar un servicio a un paciente");
        botonRegistrarServicioPaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonRegistrarServicioPacienteActionPerformed(evt);
            }
        });

        botonBuscarPaciente.setFont(new java.awt.Font("Trebuchet MS", 0, 16)); // NOI18N
        botonBuscarPaciente.setText("Buscar a un paciente");

        botonMostrarRegistroPacientes.setFont(new java.awt.Font("Trebuchet MS", 0, 16)); // NOI18N
        botonMostrarRegistroPacientes.setText("Mostrar a todos los pacientes registrados");

        botonSalir.setFont(new java.awt.Font("Trebuchet MS", 3, 16)); // NOI18N
        botonSalir.setForeground(new java.awt.Color(204, 0, 0));
        botonSalir.setText("Salir");
        botonSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonSalirActionPerformed(evt);
            }
        });

        txtRegimenContributivoDeSalud.setFont(new java.awt.Font("Tahoma", 3, 36)); // NOI18N
        txtRegimenContributivoDeSalud.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        txtRegimenContributivoDeSalud.setText("Regimen contributivo de salud");
        txtRegimenContributivoDeSalud.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtSeleccioneUnaOpcion)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtReporte)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(txtRegimenContributivoDeSalud, javax.swing.GroupLayout.PREFERRED_SIZE, 578, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(166, 166, 166))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(botonRegistrarPaciente)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(botonRegistrarServicioPaciente)
                                .addGap(18, 18, 18)
                                .addComponent(botonBuscarPaciente)
                                .addGap(18, 18, 18)
                                .addComponent(botonMostrarRegistroPacientes)
                                .addGap(18, 18, 18)))
                        .addComponent(botonSalir)))
                .addContainerGap(39, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtRegimenContributivoDeSalud)
                .addGap(69, 69, 69)
                .addComponent(txtSeleccioneUnaOpcion)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botonRegistrarPaciente)
                    .addComponent(botonRegistrarServicioPaciente)
                    .addComponent(botonBuscarPaciente)
                    .addComponent(botonMostrarRegistroPacientes)
                    .addComponent(botonSalir))
                .addGap(68, 68, 68)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 267, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtReporte)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>                        

    // Funcion del boton "Salir" para salir del aplicativo:
    
    private void botonSalirActionPerformed(java.awt.event.ActionEvent evt){
        
        System.exit(0);
    }                                          
    
     // Funciona para darle un acción/evento al botón escogido:
    
    private void botonRegistrarPacienteActionPerformed(java.awt.event.ActionEvent evt) {
      
        opcion = Integer.parseInt(JOptionPane.showInputDialog("Ingrese el tipo de paciente a registrar. - 1. Paciente Cotizante. - 2. Paciente Beneficiario: "));
        opcion = Integer.parseInt(sc.nextLine());

        
        registro = contador;
        
          switch (opcion) {
              
                case 1:

            
                         numeroDocumentoIdentidad = Integer.parseInt(JOptionPane.showInputDialog("Ingrese el numero de identificacion del paciente a registrar: "));
                         
                         nombre = JOptionPane.showInputDialog("Ingrese el nombre completo del paciente a registrar:");
                         
                         celular = JOptionPane.showInputDialog("Ingrese el número de celular del paciente a registrar:");
                         
                         salario = Double.parseDouble(JOptionPane.showInputDialog("Ingrese el salario mensual del paciente a registrar:"));
                         
                         break;
                         
                case 2:
                    
                        registroCotizante = Integer.parseInt(JOptionPane.showInputDialog("Ingrese el número de registro del paciente cotizante:"));
                        
                        tipoRelacion = JOptionPane.showInputDialog("Ingrese el tipo de relación con el paciente cotizante:");
                        
                        tipoIdentificacion = JOptionPane.showInputDialog("Ingrese el tipo de identificación del paciente a registrar:");
                        
                        

                
                    
            
            
            
            
            
            
       
         
        
        
        
        
        
        
                
        }
        
    }                                                      
     
     // Funciona para darle un acción/evento al botón escogido:
    
    
     private void botonRegistrarServicioPacienteActionPerformed(java.awt.event.ActionEvent evt) {                                                               
        // TODO add your handling code here:
    }
    
     private void botonMostrarRegistroPacientesActionPerformed(java.awt.event.ActionEvent evt) {
        
       
    }
    
     private void botonBuscarPacienteActionPerformed(java.awt.event.ActionEvent evt) {

    /**
     * @param args the command line arguments
     */
    
     public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }
     
     public static boolean ExistePaciente(ArrayList<Paciente> registroPacientes, int identificacionPaciente){
        boolean tmpVar = false;

        for(Paciente paciente : registroPacientes){

            if(paciente.getNumeroDocumentoIdentidad() == identificacionPaciente){
                tmpVar = true;
            }
        }


        return tmpVar;
    }


    public  Paciente ExistenciaCotizante(ArrayList<Paciente> registroPacientes, int codigoCotizante){
        Paciente tmpObj = new Cotizante();
        for(Paciente paciente : registroPacientes) {
            if (paciente.getNumeroRegistro() == codigoCotizante && paciente instanceof Cotizante) {
                tmpObj = paciente;
                break;
            }else{
                tmpObj = null;
            }
        }
        return tmpObj;
    }

    private int obtenerNumeroConsecutivo(){
        return this.contador;
    }


    private void RegistrarPaciente(Paciente paciente){
        this.contador++; //contador numero pacientes
        registroPacientes.add(paciente);



    }

    public String MostrarRegistroPaciente(ArrayList<Paciente> registroPacientes, int identificacionPaciente){
        String output = " ";

        //todo Implementar recorrido de array y concatenar el "toString" del paciente en la var output

        for(Paciente paciente : registroPacientes){
            if(paciente.getNumeroDocumentoIdentidad() == identificacionPaciente){
                output = paciente.toString();
                break;
            }else{
                output = "El paciente no existe.";
            }
        }

        return output;
    }


    public  String RegistrarServicio(int identificacionPaciente, ArrayList<Paciente> registroPacientes, int tipoServicio){
        String tmpStatus = "\n";
        Servicios tmpServicio;
        boolean tmpExiste = false;
        int tmpPosicion;

        for(Paciente paciente : registroPacientes){
            if(paciente.getNumeroDocumentoIdentidad() == identificacionPaciente){
                if(paciente instanceof Cotizante){
                    tmpServicio = new Servicios(1, tipoServicio, ((Cotizante) paciente).getSalario());
                }else{
                    tmpServicio = new Servicios(2, tipoServicio, ((Beneficiario) paciente).getSalarioCotizante());
                }
                paciente.registrarServicio(tmpServicio);
                // todo borrar esto e invocar metodo "toString" del servicio, el metodo "paciente.obtenerUltimoServicio()" es deundante
                tmpStatus = tmpServicio.toString();


                tmpExiste = true;
                break;
            }
        }
        if(!tmpExiste){

            tmpStatus += "\nEl paciente no existe.";
        }

        return tmpStatus;
    }

    public String MostrarRegistroPacientes(ArrayList<Paciente> regPacientes){
        String tmpOutput = " ";
        Collections.sort(regPacientes);


        if(regPacientes.size() == 0){
            tmpOutput = "No se encuentran pacientes registrados.";
            return tmpOutput;
        }

        for(Paciente paciente : regPacientes){

            tmpOutput += "\n ------------------------------ \n" + paciente.toString(); //separador para pacientes
        }


        return tmpOutput;
    }

    public void SalvarDatos(ArrayList<Paciente> registroPacientes){
        String fName = "Data";
        try {
            FileOutputStream file = new FileOutputStream(fName);
            ObjectOutputStream oos = new ObjectOutputStream(file);
            oos.writeObject(registroPacientes);
            oos.close();
            file.close();
        }catch (IOException ioe){
            System.out.println(ioe);

        }

    }

    public ArrayList<Paciente> RecuperarDatos(){
        //todo revisar y buscar el error
        String fname = "Data";
        ArrayList<Paciente> registroTmp = new ArrayList<>();

        try {
            FileInputStream file = new FileInputStream(fname);
            ObjectInputStream ois = new ObjectInputStream(file);
            //quizas el error se encuentra aca
            registroTmp = (ArrayList) ois.readObject();

            ois.close();
            file.close();

        }catch (IOException ioe){
            System.out.print(ioe);
            return registroTmp;

        }catch (ClassNotFoundException c){
            System.out.println(c);

        }


        return registroTmp;
    }
     
    // Variables declaration - do not modify                     
    private javax.swing.JButton botonBuscarPaciente;
    private javax.swing.JButton botonMostrarRegistroPacientes;
    private javax.swing.JButton botonRegistrarPaciente;
    private javax.swing.JButton botonRegistrarServicioPaciente;
    private javax.swing.JButton botonSalir;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea txtAreaReporte;
    private javax.swing.JLabel txtRegimenContributivoDeSalud;
    private javax.swing.JLabel txtReporte;
    private javax.swing.JLabel txtSeleccioneUnaOpcion;
    // End of variables declaration
    
}
